#!/usr/bin/env python3

import argparse
import datetime
import json
import os
import subprocess
import textwrap

VERSION = '1.1'
our_dir = os.path.dirname(os.path.realpath(__file__))
priv_dir = '/home/private'
encr_dir = os.path.join(priv_dir, 'dehydrated')
cert_dir = os.path.join(encr_dir, 'certs', '{domain}')

def init_tls(domain):
    os.chdir(priv_dir)
    success = subprocess.call(['git', 'clone', 'https://github.com/lukas2511/dehydrated.git'])
    if success != 0:
        exit('Unable to clone dehydrated. Nothing has been done yet. Aborting.')
    os.chdir(encr_dir)
    os.makedirs('/home/public/.well-known/acme-challenge/')
    with open('config', 'w') as f:
        f.write('WELLKNOWN="/home/public/.well-known/acme-challenge/"\n')
    list_aliases()
    print('\n\n\nINFO:\nTLS has been initialized.\n')

def list_aliases():
    aliases = json.loads(subprocess.getoutput('nfsn -j list-aliases'))
    if len(aliases) == 0:
        exit('You have no aliases for this site, which means that you cannot use this script. This script does not work with *.nfshost.com domains.')
    return aliases

def get_cert_dir():
    dirs = [cert_dir.format(domain=a) for a in list_aliases()]
    for dir_ in dirs:
        if os.path.isdir(dir_):
            return dir_
    raise RuntimeError('Unable to automatically locate the certificate directory.')

def update_tls(domain, is_install=False):
    os.chdir(encr_dir)
    with open('domains.txt', 'w') as f:
        f.write(' '.join(list_aliases()))
    if not is_install:
        success = subprocess.call(['git', 'pull'])
        if success != 0:
            print("Unable to update to the most recent version of Let's Encrypt. Continuing, but without the latest code.")
    success = subprocess.call(['./dehydrated', '--cron'])
    if success != 0:
        exit('Unable to run dehydrated. TLS has not been updated. Aborting.')
    
    os.chdir(get_cert_dir())
    success = subprocess.call(['bash', '-c', 'cat privkey.pem cert.pem chain.pem | nfsn -i set-tls'])
    if success != 0:
        exit('''Unable to import the certificates.
        After investigating the problem, please run these commands:

        cd {}
        cat privkey.pem cert.pem chain.pem | nfsn -i set-tls
        '''.format(os.path.realpath(os.curdir)))
    with open(os.path.join(our_dir, 'certificate_expiration.txt'), 'w') as f:
        f.write(str(cert_expires('cert', domain).timestamp()))
    print('\n\n\nINFO:\nTLS has been updated. The new certificate expires on {}.\n'.format(cert_expires('file').isoformat()))

def cert_expires(from_, domain=None):
    if from_ == 'cert':
        if not domain:
            raise ValueError('When from_ is "cert", you MUST set domain')
        try:
            raw = subprocess.check_output(
                ['openssl', 'x509', '-noout', '-in',
                    os.path.join(get_cert_dir(), 'cert.pem'), '-enddate'],
                universal_newlines=True).strip()
        except subprocess.CalledProcessError:
            exit('Unable to determine the certificate expiration date. Please investigate. Aborting')
        # Example return from openssl: notAfter='Aug 20 00:24:00 2016 GMT'
        junk, when = raw.split('=', maxsplit=1)
        return datetime.datetime.strptime(when.replace('GMT', '+0000'), '%b %d %H:%M:%S %Y %z')
    elif from_ == 'file':
        with open(os.path.join(our_dir, 'certificate_expiration.txt')) as f:
            return datetime.datetime.fromtimestamp(float(f.read().strip()), tz=datetime.timezone.utc)
    else:
        raise ValueError('Bad value for from_')

def is_installed():
    if os.path.isdir(encr_dir):
        return True
    elif os.path.isdir(os.path.join(priv_dir, 'letsencrypt.sh')):
        upgrade(VERSION)
        return True
    else:
        return False

def upgrade(target_version):
    if target_version == '1.1':
        os.rename(os.path.join(priv_dir, 'letsencrypt.sh'), encr_dir)
    # elif target_version == '1.2':
    #     upgrade('1.1')
    #     do_version_1_2_upgrade()
    else:
        raise NotImplementedError('Upgrading to version {} is not supported'.format(target_version))

def print_next_steps(domain):
    print(textwrap.dedent('''\n
    ================================ NEXT STEP =================================
    | Now that Let's Encrypt is installed, we need to keep it up to date. That |
    | means that we need to set up a cron job. Log in to your account on NFSN  |
    | (members.nearlyfreespeech.net) and navigate to your site information     |
    | page. Then go to the "Manage Scheduled Tasks" item on the sidebar and set|
    | up a new task.                                                           |
    |                                                                          |
    | Use the following command and set it to run daily (or weekly). Run it as |
    | your user. It will monitor your certificate's expiration date and update |
    | it two weeks before it expires.                                          |
    |                                                                          |
        {command} --update --quiet {domain}
    |                                                                          |
    | With the --quiet option as above, you will only be notified when the     |
    | certificate is updated. If you want to be notified every time the script |
    | runs, remove the --quiet option.                                         |
    ============================================================================
    '''.format(domain=domain, command=os.path.join(our_dir, 'tls'))))

def parse_args():
    desc="Automatically enable and/or update TLS on NearlyFreeSpeech.net sites using Let's Encrypt"
    parser = argparse.ArgumentParser(description=desc)
    group = parser.add_mutually_exclusive_group(required=True)
    padd = parser.add_argument
    gadd = group.add_argument
    padd('domain', metavar='DOMAIN',
        help='Your primary domain name; your other aliases will be detected automatically. IMPORTANT NOTE: This script DOES NOT work with NFSN default names, such as example.nfshost.com.')
    gadd('--install', action='store_true',
        help="Enable Let's Encrypt for the first time")
    gadd('--update', action='store_true',
        help="Update your certificate, if necessary. Will not update certificates which are valid for at least two more weeks unless -f/--force is given.")
    padd('-f', '--force', action="store_true",
        help='With --update, force certificate update even if it is not necessary')
    padd('-q', '--quiet', action='store_true',
        help='With --update, exit silently if no update is carried out. Useful to avoid useless messages from cron.')
    return parser.parse_args()

def main():
    args = parse_args()
    if args.domain.endswith('.nfshost.com'):
        exit("This script doesn't work with domains ending with '.nfshost.com'. If your site has its own domain name, please use that. If not, you can't use this script.")
    if args.install:
        if is_installed():
            exit("Let's Encrypt is already installed. Perhaps you meant to give --update instead of --install.")
        else:
            init_tls(args.domain)
            update_tls(args.domain, is_install=True)
            print_next_steps(args.domain)
    elif args.update:
        if not is_installed():
            exit("You have to install Let's Encrypt first using the --install option.")
        now = datetime.datetime.now(datetime.timezone.utc)
        expires = cert_expires('file')
        if expires - now <= datetime.timedelta(weeks=2):
            update_tls(args.domain)
        else:
            if args.force:
                update_tls(domain)
            elif not args.quiet:
                print("The certificate doesn't expire until {}. Not updating.".format(expires.isoformat()))
        if not args.quiet:
            print("Updating the nfsn-tls repository to the latest version. The new code, if any, will be used for the next update.")
        os.chdir(our_dir)
        subprocess.call(['git', 'pull'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

if __name__ == '__main__':
    main()
